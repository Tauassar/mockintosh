version: '3.8'

services:
  # Mockintosh service
  mockintosh:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile
    ports:
      - "8000:8000"  # Main service port
      - "8001:8001"  # Management UI port
    volumes:
      - mockintosh-configs:/app/configs:ro
      - mockintosh-data:/app/data
      - mockintosh-logs:/app/logs
    environment:
      - MOCKINTOSH_DEBUG=false
      - MOCKINTOSH_DATA_DIR=/app/data
      - MOCKINTOSH_LOGGING_LENGTH_LIMIT=1000
      - PYTHONPATH=/app
    command: ["mockintosh", "-c", "/app/configs/config.yaml"]
    networks:
      - mockintosh-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/__admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - kafka
      - redis
      - rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Kafka service for async messaging
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    networks:
      - mockintosh-network
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Redis service for caching and messaging
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - mockintosh-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ service for AMQP messaging
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - mockintosh-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT broker for IoT messaging
  mqtt:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"   # MQTT port
      - "9001:9001"   # WebSocket port
    volumes:
      - mosquitto-config:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    networks:
      - mockintosh-network
    restart: unless-stopped

  # ElasticMQ for Amazon SQS compatibility
  elasticmq:
    image: softwaremill/elasticmq-native:1.4.1
    ports:
      - "9324:9324"   # REST API port
      - "9325:9325"   # SQS port
    volumes:
      - elasticmq-config:/opt/elasticmq.conf
    networks:
      - mockintosh-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mockintosh-network
    restart: unless-stopped
    depends_on:
      - mockintosh

volumes:
  mockintosh-configs:
    driver: local
  mockintosh-data:
    driver: local
  mockintosh-logs:
    driver: local
  kafka-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  mosquitto-config:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-log:
    driver: local
  elasticmq-config:
    driver: local

networks:
  mockintosh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
